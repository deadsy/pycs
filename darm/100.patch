--- ./armv7.c	2016-04-07 05:58:04.000000000 -0700
+++ ./armv7.c	2021-08-14 09:57:38.209445391 -0700
@@ -126,6 +126,7 @@
                 return 0;
             }
         }
+        /* fall through */
         // otherwise, if the 21th bit is not set, it's either the PLD or the
         // PLI instruction
         // we fall-through here, as 0b011 also handles the PLD and PLI
@@ -731,6 +732,7 @@
             }
             return 0;
         }
+        /* fall through */
 
     case T_ARM_SM:
         switch ((uint32_t) d->instr) {
@@ -806,6 +808,7 @@
             // SMUL overlaps with SMC, so we define SMUL in SMC..
             break;
         }
+        /* fall through */
 
     case T_ARM_PAS:
         // we have a lookup table with size 64, for all parallel signed and
--- ./thumb.c	2016-04-07 05:58:04.000000000 -0700
+++ ./thumb.c	2021-08-14 09:59:21.004459242 -0700
@@ -137,6 +137,7 @@
 
         case I_ORR: case I_BIC:
             d->Rn = w & b111;
+            /* fall through */
             // fall-through as the mvn handler is almost the same, except
             // for parsing Rn
 
@@ -150,6 +151,7 @@
             d->Rn = (w >> 3) & b111;
             return 0;
         }
+        /* fall through */
 
     case T_THUMB_BRANCH_REG:
         d->instr = (w >> 7) & 1 ? I_BLX : I_BX;
@@ -183,6 +185,7 @@
             d->Rn = PC;
             d->U = B_SET;
             d->imm <<= 2;
+            /* fall through */
             // fall-through as adr also has to set Rd
 
         case I_MOV:
@@ -193,6 +196,7 @@
             d->Rn = (w >> 8) & b111;
             return 0;
         }
+        /* fall through */
 
     case T_THUMB_EXTEND:
         d->instr = type_extend_instr_lookup[(w >> 6) & b11];
--- ./thumb2-decoder.c	2021-08-14 10:00:40.991755591 -0700
+++ ./thumb2-decoder.c	2021-08-14 10:01:33.939316062 -0700
@@ -1203,6 +1203,7 @@
         case 3:
             return I_QDSUB;
         }
+        /* fall through */
 
     case 1:
         d->instr_type = T_THUMB2_RD_RM_REG;
@@ -1222,6 +1223,7 @@
         case 3:
             return I_REVSH;
         }
+        /* fall through */
 
     case 2:
         if(op2 == 0) {
